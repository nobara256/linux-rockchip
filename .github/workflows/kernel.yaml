# This is a basic workflow to help you get started with Actions

name: linux-kernel

# Controls when the workflow will run
on:
    # Allows you to run this workflow manually from the Actions tab
    workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
    # This workflow contains a single job called "kernel-build"
    kernel-build:
        # The type of runner that the job will run on
        runs-on: ubuntu-latest

        # Steps represent a sequence of tasks that will be executed as part of the job
        steps:
            # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
            - uses: actions/checkout@v4

            - name: Install required dependencies.
              run: |
                sudo apt-get update && sudo apt-get upgrade -y
                sudo apt-get install -y build-essential gcc-aarch64-linux-gnu bison         \
                qemu-user-static qemu-system-arm qemu-efi u-boot-tools binfmt-support       \
                debootstrap flex libssl-dev bc rsync kmod cpio xz-utils fakeroot parted     \
                udev dosfstools uuid-runtime git-lfs device-tree-compiler python2 python3   \
                python-is-python3 fdisk bc debhelper python3-pyelftools python3-setuptools  \
                python3-distutils python3-pkg-resources swig libfdt-dev libpython3-dev dctrl-tools 7zip wget

            - name: Download the latest kernel sources.
              run: |
                wget https://git.kernel.org/torvalds/t/linux-6.13-rc5.tar.gz
                tar -xzf linux-6.13-rc5.tar.gz

            - name: Apply the patches.
              run: |
                patch --strip=1 --directory=linux-6.13-rc5 < patch/ubuntu-kernel.patch
                patch --strip=1 --directory=linux-6.13-rc5 < patch/kernel-overlay-dtc.patch

            - name: Build the kernel
              shell: bash
              run: |
                export CROSS_COMPILE=aarch64-linux-gnu-
                export CC=aarch64-linux-gnu-gcc
                export LANG=C
                export $(dpkg-architecture -aarm64)
                cd linux-6.13-rc5
                fakeroot debian/rules clean binary-headers binary-rockchip do_mainline_build=true
                cd ..

            - name: Bundle the generated .deb
              run: 7z a -ttar linux-rockchip-arm64.tar linux-*.deb

            - name: Upload the generated .deb
              uses: actions/upload-artifact@v4.5.0
              with:
                name: linux-rockchip-arm64.tar
                path: ./linux-*
                if-no-files-found: error
